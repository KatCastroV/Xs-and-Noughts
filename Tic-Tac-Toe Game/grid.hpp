#ifndef grid_hpp
#define grid_hpp

#include "game.hpp"
//#include "players.hpp"

#include <stdio.h>
#include <iostream>
#include <vector>

/*
class Grid : public Game
{
    private:
        static const int ROWS = 19;
        static const int COLUMNS = 38;
        static const int subCols = 12;
        static const int subRows = 6;
        int dimensions;
        
    public:
        std::string gridPosition;
        int gridSize;
        int maxMoves;
        int r, c;
        char symbol;
        std::vector<std::string> possMoves;
        std::vector<std::string> movesLeft;
        int corrRowLetters[9] = {3, 5, 7, 9, 11, 13, 15, 17, 19};
        int corrColNumbers[9] = {5, 9, 13, 17, 21, 25, 29, 33, 37};
        char gameGrid[ROWS][COLUMNS];
        char basicGrid[ROWS][COLUMNS]= {{' ',' ',' ',' ','1',' ',' ',' ','2',' ',' ',' ','3',' ',' ',' ','4',' ',' ',' ','5',' ',' ',' ','6',' ',' ',' ','7',' ',' ',' ','8',' ',' ',' ','9',' '},
                                        {' ',' ','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*'},
                                        {'A',' ','*',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' '},
                                        {' ',' ','*','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-'},
                                        {'B',' ','*',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' '},
                                        {' ',' ','*','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-'},
                                        {'C',' ','*',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' '},
                                        {' ',' ','*','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-'},
                                        {'D',' ','*',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' '},
                                        {' ',' ','*','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-'},
                                        {'E',' ','*',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' '},
                                        {' ',' ','*','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-'},
                                        {'F',' ','*',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' '},
                                        {' ',' ','*','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-'},
                                        {'G',' ','*',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' '},
                                        {' ',' ','*','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-'},
                                        {'H',' ','*',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' '},
                                        {' ',' ','*','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-'},
                                        {'I',' ','*',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' '}};
    
        
    
        void pickGrid();
        
    
    
        //Assigns all possible moves to a 2D vector
        //depending on dimension of play grid
        void gridMoves()
        {
            
        }
        void generateGrid(int gridSize);
        void generateMoves(int gridSize);
        void addDeleteMoves(std::string gridPosition);
        void enterMove();
        void printGameGrid(char symbol);
};
*/


class Grid : public Game
{
    private:
    static const int mainRows = 19;
    static const int mainCols = 38;
    static const int subCols = 12;
    static const int subRows = 6;
    int dimensions;
    int gridSize;
    int maxMoves;
    std::vector<std::string> possMoves;
    //std::vector<std::string> movesLeft;
    //int corrRowLetters[9] = {3, 5, 7, 9, 11, 13, 15, 17, 19};
    //int corrColNumbers[9] = {5, 9, 13, 17, 21, 25, 29, 33, 37};
    //char gameGrid[ROWS][COLUMNS];
    std::vector<std::vector<char>> gameGrid;
    //const char basicGrid[mainRows][mainCols]
    const std::vector<std::vector<char>> basicGrid= {{' ',' ',' ',' ','1',' ',' ',' ','2',' ',' ',' ','3',' ',' ',' ','4',' ',' ',' ','5',' ',' ',' ','6',' ',' ',' ','7',' ',' ',' ','8',' ',' ',' ','9',' '},
                                    {' ',' ','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*'},
                                    {'A',' ','*',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' '},
                                    {' ',' ','*','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-'},
                                    {'B',' ','*',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' '},
                                    {' ',' ','*','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-'},
                                    {'C',' ','*',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' '},
                                    {' ',' ','*','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-'},
                                    {'D',' ','*',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' '},
                                    {' ',' ','*','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-'},
                                    {'E',' ','*',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' '},
                                    {' ',' ','*','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-'},
                                    {'F',' ','*',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' '},
                                    {' ',' ','*','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-'},
                                    {'G',' ','*',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' '},
                                    {' ',' ','*','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-'},
                                    {'H',' ','*',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' '},
                                    {' ',' ','*','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-','+','-','-','-'},
                                    {'I',' ','*',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' ','|',' ',' ',' '}};


    public:
        Grid() : Game(mainRows, mainCols, subCols, subRows)
        {
           
        }
        bool pickGrid();
        void generateGrid(int size);
        void generateMoves(int size);
        void setGridInfo();

};

#endif /* grid_hpp */
